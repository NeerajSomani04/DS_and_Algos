What is the maximum possible value of an integer in Python ?
In Python, value of an integer is not restricted by the number of bits and can expand to the limit of the available memory

Global variable vs Local variable -->
global variable is defined outside of function. 
Local variable defined inside of function. 
If we want to use global variable and local variable with same name, then global variable, needs to be use with global keyword.

Packing and Unpacking Arguments in Python -->
We use two operators * (for tuples) and ** (for dictionaries).
https://www.geeksforgeeks.org/packing-and-unpacking-arguments-in-python/

---> end parameter in print() function --> 
By default python’s print() function ends with a newline.
how to print without newline, By default, the value of this parameter is ‘\n’, i.e. the new line character. You can end a print statement with any character/string using this parameter.
# ends the output with a <space>  
print("Welcome to" , end = ' ')  
print("GeeksforGeeks", end = ' ') 

Type Conversion in Python --> to convert values of one type to another
1. int(a,base) : This function converts any data type to integer. ‘Base’ specifies the base in which string is if data type is string.
2. float() : This function is used to convert any data type to a floating point number.
3. ord() : This function is used to convert a character to integer.
4. hex() : This function is to convert integer to hexadecimal string.
5. oct() : This function is to convert integer to octal string.
6. tuple() : This function is used to convert to a tuple.
7. set() : This function returns the type after converting to set.
8. list() : This function is used to convert any data type to a list type.
9. dict() : This function is used to convert a tuple of order (key,value) into a dictionary.

10. str() : Used to convert integer into a string.

11. complex(real,imag) : : This function converts real numbers to complex(real,imag) number.

Byte Objects vs String in Python --->
Byte objects are sequence of Bytes, whereas Strings are sequence of characters.
Byte objects are in machine readable form internally, Strings are only in human readable form.
Since Byte objects are machine readable, they can be directly stored on the disk. Whereas, Strings need encoding before which they can be stored on disk.

Converting Strings to byte objects is termed as encoding. 
This is necessary so that the text can be stored on disk using mapping using ASCII or UTF-8 encoding techniques.
encode() and decode() are the methods used to perform this tasks.

Python: In Python, there is a simple and syntactically neat construct to swap variables, we just need to write “x, y = y, x”.

Underscore (_) in Python
Following are different places where _ is used in Python:

Single Underscore:
In Interpreter --> _ returns the value of last executed expression value in Python Prompt/Interpreter
After a name --> this is used to avoid variable names same as python reserved keyword names.
Before a name --> indicates to programmer that It is for internal use only, that can be modified whenever class want. (treated as non-public). 
Python does not specify truly private so this ones can be call directly from other modules if it is specified in __all__, We also call it weak Private. 

Double Underscore:
__leading_double_underscore --> Leading double underscore tell python interpreter to rewrite name in order to avoid conflict in subclass.Interpreter changes variable name with class extension and that feature known as the Mangling. Most offen this becomes a Private member.

__before_after__  --> considers special methods in Python.  Python provide this methods to use it as the operator overloading depending on the user.
Python provides this convention to differentiate between the user defined function with the module’s function
These methods provide special syntactic features to the names. For example, __file__ indicates the location of Python file, __eq__ is executed when a == b expression is executed.


Private Variables in Python -->
In Python, there is no existence of “Private” instance variables which cannot be accessed except inside an object. However, a convention is being followed by most Python code and coders i.e., a name prefixed with an underscore, For e.g. _geek should be treated as a non-public part of the API or any Python code, 

mangling, which means that there is a limited support for a valid use-case for class-private members basically to avoid name clashes of names with names defined by subclasses.

__name__ (A Special variable) in Python --> https://www.geeksforgeeks.org/__name__-special-variable-python/
Since there is no main() function in Python, when the command to run a python program is given to the interpreter, the code that is at level 0 indentation is to be executed. However, before doing that, it will define a few special variables. __name__ is one such special variable. If the source file is executed as the main program, the interpreter sets the __name__ variable to have a value “__main__”. If this file is being imported from another module, __name__ will be set to the module’s name.
__name__ is a built-in variable which evaluates to the name of the current module. Thus it can be used to check whether the current script is being run on its own or being imported somewhere else by combining it with if statement, as shown below.

Basic Operators in Python -->
1. Arithmetic operators: Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication and division.
/	Division (float): divides the first operand by the second	x / y
//	Division (floor): divides the first operand by the second	x // y
%	Modulus: returns the remainder when first operand is divided by the second	x % y

In Python 3, ‘/’ operator does floating point division for both int and float arguments.

# Examples of Arithmetic Operator 
a = 9
b = 4
# Division(float) of number  
div1 = a / b # output will be 2.25
# Division(floor) of number  
div2 = a // b # output will be 2
# Modulo of both number 
mod = a % b # output will be 1

2. Relational Operators like, >, <. ==, !=, <=, >=.

3. Logical operators: Logical operators perform Logical AND, Logical OR and Logical NOT operations.
and	Logical AND: True if both the operands are true	(Syntax --> x and y)
or	Logical OR: True if either of the operands is true	(Syntax --> x or y)
not	Logical NOT: True if operand is false	(Syntax --> not x)

4. Bitwise operators: Bitwise operators acts on bits and performs bit by bit operation. Need to understand it more when needed.

&	Bitwise AND	x & y
|	Bitwise OR	x | y
~	Bitwise NOT	~x
^	Bitwise XOR	x ^ y
>>	Bitwise right shift	x>>
<<	Bitwise left shift	x<<

Note --> “Logical not or !” is meant for boolean values and “bitwise not or ~” is for integers. 
python do auto promotion of boolean to integer type when an integer operator is applied. But Java doesn’t do it.

5. Assignment operators: Assignment operators are used to assign values to the variables.

6. Special operators: There are some special type of operators like-
6.1 Identity operators- 
is and is not are the identity operators both are used to check if two values are located on the same part of the memory. Two variables that are equal does not imply that they are identical.
is          True if the operands are identical 
is not      True if the operands are not identical

6.2 Membership operators-
in and not in are the membership operators; used to test whether a value or variable is in a sequence.
in            True if value is found in the sequence
not in        True if value is not found in the sequence

Important Points:

First the given condition is evaluated (a < b), then either a or b is returned based on the Boolean value returned by the condition
Order of the arguments in the operator is different from other languages like C/C++ (See C/C++ ternary operators).
Conditional expressions have the lowest priority amongst all Python operations.

Any & All in Python -->
Any and All are two built ins provided in python used for successive And/Or.
Any ---> Returns true if any of the items is True. It returns False if empty or all are false.
All --> Returns true if all of the items are True (or if the iterable is empty).

Need to start from here --> https://www.geeksforgeeks.org/inplace-vs-standard-operators-python/
