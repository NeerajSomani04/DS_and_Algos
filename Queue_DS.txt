Queue is a linear structure which follows a particular order in which the operations are performed. The order is First In First Out (FIFO). 

The difference between stacks and queues is in removing. In a stack we remove the item the most recently added; in a queue, we remove the item the least recently added.

Operations on Queue: Mainly the following four basic operations are performed on queue: -->

Enqueue: Adds an item to the queue. If the queue is full, then it is said to be an Overflow condition.
Dequeue: Removes an item from the queue. The items are popped in the same order in which they are pushed. If the queue is empty, then it is said to be an Underflow condition.
Front: Get the front item from queue.
Rear: Get the last item from queue.

Applications of Queue: 
Queue is used when things donâ€™t have to be processed immediatly, but have to be processed in First InFirst Out order like Breadth First Search.
1) Examples include CPU scheduling, Disk Scheduling.
2) When data is transferred asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.

Time Complexity: Time complexity of all operations like enqueue(), dequeue(), isFull(), isEmpty(), front() and rear() is O(1). There is no loop in any of the operations.

Implementation: There are two ways to implement a Queue:
Using array
Using linked list

In a Queue data structure, we maintain two pointers, front and rear. 
The front points the first item of queue and rear points to last item.

These two main operations must be implemented efficiently. --> 
enQueue() This operation adds a new node after rear and moves rear to the next node.
deQueue() This operation removes the front node and moves front to the next node.
