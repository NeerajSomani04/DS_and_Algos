1 (Linear Data Structures) --> Array, Linked List, Stack and Queue

Array --> Array is a data structure used to store homogeneous elements at contiguous locations. Size of an array must be provided before storing data.

Let size of array be n.
Accessing Time: O(1) [This is possible because elements
                      are stored at contiguous locations]   
Search Time:   O(n) for Sequential Search: 
               O(log n) for Binary Search [If Array is sorted]
Insertion Time: O(n) [The worst case occurs when insertion 
                     happens at the Beginning of an array and 
                     requires shifting all of the elements]
Deletion Time: O(n) [The worst case occurs when deletion 
                     happens at the Beginning of an array and 
                     requires shifting all of the elements]
                     
Linked List --> each element is a separate object. Each element (that is node) of a list is comprising of two items – the data and a reference to the next node.        

Types of Linked List :
1. Singly Linked List: Every node stores the data and a reference to the next node. and the last node has next address or reference as NULL.
2. Doubly LL --> two references associated with each node, One of the reference points to the next node and one to the previous node.
3. Circular Linked List --> all nodes are connected to form a circle. There is no NULL at the end. It can be a singly circular linked list or doubly circular linked list. This is useful in implementation of circular queue in linked list.

LL adds a node only when a new element is introduced. Insertions and deletions also become easier with linked list.

*** One big drawback of linked list is, random access is not allowed. With arrays, we can access i’th element in O(1) time. In linked list, it takes Θ(i) time.

Accessing time of an element : O(n)
Search time of an element : O(n)
Insertion of an Element : O(1) [If we are at the position 
                                where we have to insert 
                                an element] 
Deletion of an Element : O(1) [If we know address of node
                               previous the node to be 
                               deleted] 
                               
                               
Stack --> LIFO (last in, first out), can be implemented by using both array and linked list.
two principal operations: push, which adds an element to the collection, and pop, which removes the last element that was added. 
Insertion : O(1)
Deletion :  O(1)
Access Time : O(n) [Worst Case]
Insertion and Deletion are allowed on one end.

Example : Stacks are used for maintaining function calls (the last called function must finish execution first), we can always remove recursion with the help of stacks. undo command in editor tools, back functionality in web browsers.

Queue (First in, First Out) --> can be implemented by using both array and linked list.
 two principal operations: enqueue, the process of adding an element to the collection.(The element is added from the rear side) and dequeue, the process of removing the first element that was added. (The element is removed from the front side).
Insertion : O(1)
Deletion  : O(1)
Access Time : O(n) [Worst Case]

Examples include CPU scheduling, Disk Scheduling. transferred data asynchronously (data not necessarily received at same rate as sent) between two processes. Examples include IO Buffers, pipes, file IO, etc.

Circular Queue The advantage of this data structure is that it reduces wastage of space in case of array implementation, As the insertion of the (n+1)’th element is done at the 0’th index if it is empty.
