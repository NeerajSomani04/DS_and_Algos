IK Team key points -->

1) candidate should not hope that they are ready. They should know and feel that they are ready and comfortable for interview. 
2) We should be convienced why we wrote a code in such way, why the time and space complexity is what we thought. 
3) We need to indulge in coding then only we can feel and work on it.
4) We should know how to write algos and its every part in english clearly. Means, we should be able to write each function (sub-routine) and its part in pure english clearly.
5) Try to think of writing a module seperately (few lines of code that can work independently). This will make overall program more clean, readable and easy to debug in-case of issues.
6) In interview if you can just mention about overall program and not implement sub-routine. That should be fine, and just cross check with interviewer that does he want you to implement sub-routine. Or he want to ask some other advance questions.
7) We should always be very clear about what is the job description of a function. 

Quick Sort -->

void QSort( arr, start, end) {
  if (start >= end) return
  c = choosePivot(arr, start, end) --> by this function we will implement a logic to choose pivot somehow
  swap arr[c] with arr[start]
  p = partition(arr, start, end) --> by this function we will implement the logic to partition the array and return the index value of pivot.
  QSort(arr, start, p-1)
  QSort(arr, p+1, end)
  return
  }

int choosePivot(arr, start, end){
  This function returns a value between start and end. 
  for example, we can implement to return always the first value of array that is
  return arr[start]
}

int partition(arr, start, end){

}


Why quick sort considered in-place algorithm and not constant space algorithm. 

Answer: because quick sort use some space to put function calls in stack. Althugh, it doesn't require extra memory space array like merge sort, it still need some space or function stack and hence not constant space algorithm.

Worst case time complexity is O(n2) and space complexity is O(n). 
time complexity --> time complexity majorly depends on the partition function.

depends on how many space will be taken by array at max at any specific given time. 

first the array will of n size, then n-1, then n-2, then n-3, ...... , till array of size 1. Hence, at any given time i will be O(n2)

space complexity --> at any given time at max there will be n function in the stack to run and hence O(n) will be time complexity.

Best Case --> time complexity will be O(n log n). because in best case pivot will divide the array in equal size and every time it will keep dividing array in equal sizes unill it its the single element in array.
Hence, n --> 2*n/2 --> 4*n/4 --> 8*n/8 
hence, n * # no of levels --> which is O (n log n)

Space complexity --> at any given time how many max function calls will be running. that is the height of the tree and that is O (log n).

average case --> will be in between best and worst case. but mostly average case is same as best case.

What is stability of algorithm --> 

two approach discussed for partitioning -->

1) choose pivot at the start of the array and partition the array based on two pointer, start and end.

2) 
how to write a for loop in python to start from a specific value and ends at specific value 
