Chapter 2 --> Analysis of Program in terms of Time and Space complexity

“Big-O” execution time of common operations on Python lists and dictionaries.
What Is Algorithm Analysis? Comparision of your program with Another and evalute whos program is better. 
Now the question is How to evaluate? 

1) Readability --> also known as Easily Maintainable.
2) On the other hand it can also be evaluated based upon the amount of computing resources that each algorithm uses.
which is 
   --> space complexity (space or memory an algorithm requires to solve the problem)
   --> time complexity  (how much time it took)

we would like to have a characterization that is independent of the program or computer being used.    
to characterize an algorithm’s efficiency in terms of execution time, independent of any particular program or computer, it is important to quantify the number of operations or steps that the algorithm will require.

The order of magnitude function describes the part of T(n) that increases the fastest as the value of n increases. Order of magnitude is often called Big-O notation (for “order”) and written as O(f(n)). The function f(n) provides a simple representation of the dominant part of the original T(n).

 example, T(n)=1+n ==> As n gets large, the constant 1 will become less and less significant and hence running time is O(n).
 As another example, T(n)=5n2+27n+1005. When n is small, say 1 or 2, the constant 1005 seems to be the dominant. However, as n gets larger, the n2 term becomes the most important. 
Hence, the function T(n) has an order of magnitude f(n)=n2, or simply that it is O(n2).

But sometimes the performance of an algorithm depends on the exact values of the data rather than simply the size of the problem.
For these kinds of algorithms we need to characterize their performance in terms of best case, worst case, or average case performance. 
 

